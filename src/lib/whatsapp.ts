/**
 * WhatsApp sharing utility that handles different scenarios and avoids blocking
 */

interface WhatsAppShareOptions {
  message: string;
  maxLength?: number;
  useWebVersion?: boolean;
  preferNativeApp?: boolean;
  delay?: number;
}

export const shareViaWhatsApp = ({
  message,
  maxLength = 1000,
  useWebVersion = false,
  preferNativeApp,
  delay = 100
}: WhatsAppShareOptions): Promise<boolean> => {
  return new Promise((resolve) => {
    try {
      // Clean and truncate message if needed
      let cleanMessage = message.trim();
      if (cleanMessage.length > maxLength) {
        cleanMessage = cleanMessage.substring(0, maxLength - 3) + '...';
      }

      // Check if mobile device
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

      const shouldPreferNative = preferNativeApp ?? !useWebVersion;
      const nativeUrl = `whatsapp://send?text=${encodeURIComponent(cleanMessage)}`;
      const fallbackBase = useWebVersion
        ? 'https://web.whatsapp.com/send'
        : 'https://wa.me';
      const fallbackUrl = `${fallbackBase}?text=${encodeURIComponent(cleanMessage)}`;

      const openInNewWindow = (url: string): boolean => {
        try {
          const newWindow = window.open(url, '_blank', 'noopener,noreferrer');
          return !!newWindow;
        } catch (error) {
          console.error('WhatsApp window open error:', error);
          return false;
        }
      };

      // Add delay to prevent spam detection
      setTimeout(() => {
        if (shouldPreferNative) {
          let nativeOpened = false;

          if (isMobile) {
            try {
              window.location.href = nativeUrl;
              nativeOpened = true;
            } catch (error) {
              console.error('WhatsApp native redirect error:', error);
            }
          } else {
            nativeOpened = openInNewWindow(nativeUrl);
          }

          if (nativeOpened) {
            resolve(true);
            return;
          }
        }

        const fallbackOpened = openInNewWindow(fallbackUrl);

        if (fallbackOpened) {
          resolve(true);
        } else {
          // Fallback: try different method or copy to clipboard
          fallbackShare(cleanMessage);
          resolve(false);
        }
      }, delay);

    } catch (error) {
      console.error('WhatsApp share error:', error);
      fallbackShare(message);
      resolve(false);
    }
  });
};

const fallbackShare = async (message: string) => {
  try {
    // Try native sharing first
    if (navigator.share) {
      await navigator.share({
        text: message,
      });
      return;
    }

    // Fallback to clipboard
    if (navigator.clipboard) {
      await navigator.clipboard.writeText(message);

      // Show user feedback
      if (typeof window !== 'undefined' && window.dispatchEvent) {
        window.dispatchEvent(new CustomEvent('whatsapp-fallback', {
          detail: { message: 'Message copied to clipboard. You can paste it in WhatsApp manually.' }
        }));
      }
    }
  } catch (error) {
    console.error('Fallback share error:', error);
  }
};

/**
 * Format business message for WhatsApp sharing
 */
export const formatBusinessMessage = (data: {
  businessName: string;
  location?: string;
  products?: string[];
  phoneNumber?: string;
  customMessage?: string;
}): string => {
  const { businessName, location, products, phoneNumber, customMessage } = data;

  let message = `🏪 *${businessName}*`;

  if (location) {
    message += `\n📍 ${location}`;
  }

  if (products && products.length > 0) {
    message += `\n\n🛍️ *Products:*\n${products.slice(0, 5).map(p => `• ${p}`).join('\n')}`;
    if (products.length > 5) {
      message += '\n...and more!';
    }
  }

  if (phoneNumber) {
    message += `\n\n📞 Contact: ${phoneNumber}`;
  }

  if (customMessage) {
    message += `\n\n${customMessage}`;
  }

  message += '\n\n✅ *Verified by Tralo*';

  return message;
};

/**
 * Format receipt message for WhatsApp sharing
 */
export const formatReceiptMessage = (data: {
  businessName: string;
  receiptNumber: string;
  customerName: string;
  date: string;
  items: Array<{ name: string; quantity: number; total: number }>;
  total: number;
  paymentMethod: string;
}): string => {
  const { businessName, receiptNumber, customerName, date, items, total, paymentMethod } = data;

  let message = `🧾 *Receipt from ${businessName}*\n`;
  message += `📄 #${receiptNumber}\n`;
  message += `👤 ${customerName}\n`;
  message += `📅 ${date}\n\n`;

  message += `🛍️ *Items:*\n`;
  items.slice(0, 5).forEach(item => {
    message += `• ${item.name} x${item.quantity} - ¢${item.total.toFixed(2)}\n`;
  });

  if (items.length > 5) {
    message += '...and more items\n';
  }

  message += `\n💰 *Total: ¢${total.toFixed(2)}*\n`;
  message += `💳 Payment: ${paymentMethod}\n\n`;
  message += `Thank you! 🙏\n`;
  message += `_Generated by Tralo_`;

  return message;
};

/**
 * Format price list message for WhatsApp sharing
 */
export const formatPriceListMessage = (data: {
  businessName: string;
  location?: string;
  phoneNumber?: string;
  items: Array<{ name: string; price: string; unit?: string }>;
  customMessage?: string;
  type: 'sales' | 'inventory';
}): string => {
  const { businessName, location, phoneNumber, items, customMessage, type } = data;

  const title = type === 'sales' ? "Today's Prices" : "Available Items";

  let message = `💰 *${title}*\n`;
  message += `🏪 ${businessName}\n`;

  if (location) {
    message += `📍 ${location}\n`;
  }

  message += `\n🛍️ *Items:*\n`;

  items.slice(0, 10).forEach(item => {
    const priceText = item.unit ? `¢${item.price}/${item.unit}` : `¢${item.price}`;
    message += `• ${item.name} - ${priceText}\n`;
  });

  if (items.length > 10) {
    message += '...and more items!\n';
  }

  if (phoneNumber) {
    message += `\n📞 ${phoneNumber}\n`;
  }

  if (customMessage) {
    message += `\n${customMessage}\n`;
  }

  message += `\n✅ _Powered by Tralo_`;

  return message;
};