import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.57.4';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface SalesReportRequest {
  period: string;
  userId: string;
}

const handler = async (req: Request): Promise<Response> => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const { period, userId }: SalesReportRequest = await req.json();

    // Get business profile
    const { data: businessProfile, error: profileError } = await supabase
      .from('business_profiles')
      .select('*')
      .eq('user_id', userId)
      .single();

    if (profileError) {
      console.error('Profile error:', profileError);
    }

    // Calculate date range
    const endDate = new Date();
    let startDate = new Date();

    switch (period) {
      case 'week':
        startDate.setDate(endDate.getDate() - 7);
        break;
      case 'month':
        startDate.setMonth(endDate.getMonth() - 1);
        break;
      case 'quarter':
        startDate.setMonth(endDate.getMonth() - 3);
        break;
      case 'year':
        startDate.setFullYear(endDate.getFullYear() - 1);
        break;
      default:
        startDate.setMonth(endDate.getMonth() - 1);
    }

    // Get sales data from analytics view to ensure correct totals
    const { data: salesData, error: salesError } = await supabase
      .from('sales_analytics')
      .select('purchase_date, product_name, effective_amount, effective_quantity, payment_method, customer_phone, is_credit_sale')
      .eq('user_id', userId)
      .gte('purchase_date', startDate.toISOString())
      .lte('purchase_date', endDate.toISOString())
      .order('purchase_date', { ascending: false });

    if (salesError) {
      console.error('Sales error:', salesError);
    }

    // Get expenses data
    const { data: expensesData, error: expensesError } = await supabase
      .from('expenses')
      .select('*')
      .eq('user_id', userId)
      .gte('expense_date', startDate.toISOString().split('T')[0])
      .lte('expense_date', endDate.toISOString().split('T')[0]);

    if (expensesError) {
      console.error('Expenses error:', expensesError);
    }

    // Calculate totals
    const totalRevenue = salesData?.reduce((sum: number, sale: any) => sum + Number(sale.effective_amount ?? 0), 0) || 0;
    const totalExpenses = expensesData?.reduce((sum: number, expense: any) => sum + Number(expense.amount ?? 0), 0) || 0;
    const creditSales = salesData?.filter((sale: any) => sale.is_credit_sale || sale.payment_method === 'credit')
      .reduce((sum: number, sale: any) => sum + Number(sale.effective_amount ?? 0), 0) || 0;
    const netProfit = totalRevenue - totalExpenses;

    const cashSales = totalRevenue - creditSales;
    const totalTransactions = salesData?.length || 0;

    // Generate CSV report
    const csvContent = [
      `Sales Summary Report - ${period.toUpperCase()}`,
      `Generated on: ${new Date().toLocaleDateString()}`,
      `Period: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`,
      `Business: ${businessProfile?.business_name || 'N/A'}`,
      `Owner: ${businessProfile?.owner_name || 'N/A'}`,
      '',
      'FINANCIAL SUMMARY',
      `Total Revenue,₵${totalRevenue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
      `Total Expenses,₵${totalExpenses.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
      `Cash Sales,₵${cashSales.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
      `Credit Sales,₵${creditSales.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
      `Net Profit,₵${netProfit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
      '',
      'PERFORMANCE METRICS',
      `Total Transactions,${totalTransactions}`,
      `Profit Margin,${totalRevenue > 0 ? ((netProfit / totalRevenue) * 100).toFixed(1) : 0}%`,
      `Credit Ratio,${totalRevenue > 0 ? ((creditSales / totalRevenue) * 100).toFixed(1) : 0}%`,
      '',
      'RECENT TRANSACTIONS',
      'Date,Product,Amount,Payment Method,Customer',
      ...(salesData?.slice(0, 50).map((sale: any) =>
        `${new Date(sale.purchase_date).toLocaleDateString()},${sale.product_name || 'N/A'},₵${Number(sale.effective_amount ?? 0).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })},${sale.payment_method || (sale.is_credit_sale ? 'credit' : 'cash')},${sale.customer_phone || 'N/A'}`
      ) || []),
      '',
      '--- Report generated by Tralo Business Management System ---',
      'Powered by Tralo | https://tralo.com'
    ].join('\n');

    const csvWithBom = `\uFEFF${csvContent}`;
    const csvBytes = new TextEncoder().encode(csvWithBom);
    const base64Content = btoa(String.fromCharCode(...csvBytes));

    return new Response(
      JSON.stringify({
        filename: `sales_report_${period}_${new Date().toISOString().split('T')[0]}.csv`,
        mimeType: 'text/csv',
        content: base64Content,
      }),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      },
    );

  } catch (error: any) {
    console.error('Error generating sales report:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json', ...corsHeaders },
      }
    );
  }
};

serve(handler);